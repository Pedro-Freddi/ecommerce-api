{
  "openapi": "3.0.1",
  "info": {
    "title": "E-commerce API",
    "version": "1.0.0",
    "description": "This is an educational project. It's an API designed to expose endpoints of a fictional e-commerce application, allowing customers and applications to execute CRUD operations and interact with the store.",
    "contact": {
      "email": "pdafreddi@gmail.com"
    }
  },
  "servers": [
    {
      "url": "https://ecommerce-api-pdafr.uc.r.appspot.com/api"
    }
  ],
  "tags": [
    {
      "name": "Customer",
      "description": "Create and manage customer data"
    },
    {
      "name": "Category",
      "description": "Categories information"
    },
    {
      "name": "Product",
      "description": "Products information"
    },
    {
      "name": "Order",
      "description": "Create and manage orders"
    },
    {
      "name": "Cart",
      "description": "Shopping cart operations"
    }
  ],
  "paths": {
    "/customer/login": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Logs in and returns the authentication cookie",
        "description": "Returns the authentication cookie that must be sent with future requests.",
        "operationId": "customerLogin",
        "requestBody": {
          "description": "JSON object containing customer e-mail and password.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  }
                }
              }
            }
          }
        },
        "security": [],
        "responses": {
          "204": {
            "description": "Successfully authenticated. The session ID is returned in a cookie named `sessionId`. You need to include this cookie in subsequent requests.\n",
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "sessionId=abc123; Path=/; Expires=abc123; HttpOnly; SameSite=Strict"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid customer e-mail or password."
          }
        }
      }
    },
    "/customer/logout": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Logs the customer out and ends the session",
        "operationId": "customerLogout",
        "responses": {
          "204": {
            "description": "Logged out successfully."
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/customer": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Creates a customer record",
        "operationId": "createCustomer",
        "requestBody": {
          "description": "JSON object containing customer data.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "format": "password"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "birthDate": {
                    "type": "string",
                    "format": "date"
                  },
                  "phone": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "general": {
                  "summary": "Example",
                  "description": "The `lastName` and `phone` fields are optional. All values must be strings and should follow the formats shown in the example.",
                  "value": {
                    "email": "email@example.com",
                    "password": "Password123!",
                    "confirmPassword": "Password123!",
                    "firstName": "John",
                    "lastName": "Doe",
                    "birthDate": "1985-12-31",
                    "phone": "+1-212-456-7890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer record was created successfully."
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Retrieves customer information",
        "description": "Returns a customer object.",
        "operationId": "getCustomer",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates customer information",
        "description": "Updates an existing customer record.",
        "operationId": "updateCustomer",
        "requestBody": {
          "description": "JSON object with customer data to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "format": "password"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "format": "password"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "birthDate": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "general": {
                  "summary": "Example",
                  "description": "The `lastName` and `phone` fields are optional. All values must be strings and should follow the formats shown in the example.",
                  "value": {
                    "email": "email@example.com",
                    "password": "Password123!",
                    "confirmPassword": "Password123!",
                    "firstName": "John",
                    "lastName": "Doe",
                    "birthDate": "1985-12-31",
                    "phone": "+1-212-456-7890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully."
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Deletes customer record",
        "description": "Deletes customer information from the database. Orders and cart items associated with the customer will also be deleted and the current session will end.",
        "operationId": "deleteCustomer",
        "responses": {
          "204": {
            "description": "Customer deleted successfully."
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/category": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Retrieves all product categories",
        "description": "Returns an array of category objects.",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No categories were found."
          }
        }
      }
    },
    "/category/{categoryName}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Retrieves products in the specified category",
        "description": "Returns an array of product objects associated with the category specified by the categoryName parameter.",
        "operationId": "getProductsByCategory",
        "parameters": [
          {
            "name": "categoryName",
            "in": "path",
            "description": "Name of the category to fetch products.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No products found for the specified category name parameter."
          }
        }
      }
    },
    "/product": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieves all products",
        "description": "Returns an array of product objects.",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Optional search term to match with product names. Use dashes instead of spaces to separate words.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No products found."
          }
        }
      }
    },
    "/product/{productName}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieves product information by name",
        "description": "Returns a single product object.",
        "operationId": "getProductByName",
        "parameters": [
          {
            "name": "productName",
            "in": "path",
            "description": "Name of the product to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "404": {
            "description": "No product found for the specified name parameter."
          }
        }
      }
    },
    "/product/id/{productId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieves product information by ID",
        "description": "Returns a single product object.",
        "operationId": "getProductById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product to fetch.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No product found for the specified ID parameter."
          }
        }
      }
    },
    "/order": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieves all orders",
        "description": "Returns an array of order objects or an empty array if the customer has no orders.",
        "operationId": "getCustomerOrders",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Creates a new order",
        "description": "Returns the order ID. To successfully create an order, you must first add one or more items to the cart.",
        "operationId": "createOrder",
        "requestBody": {
          "description": "JSON object containing shipping information for the order.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "addressLine1": {
                    "type": "string"
                  },
                  "addressLine2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "postalCode": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "general": {
                  "summary": "Example",
                  "description": "The `addressLine2` field is optional."
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderId": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/order/{orderId}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Retrieves order information specified by ID",
        "description": "Returns a single order object.",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          },
          "403": {
            "description": "Not authorized. Order was not created by this customer."
          },
          "404": {
            "description": "No order information found for the specified ID."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Order"
        ],
        "summary": "Deletes the order specified by ID",
        "description": "Deletes an order object. Note that only an order with a status of `pending` can be deleted.",
        "operationId": "deleteOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          },
          "403": {
            "description": "Not authorized. Order was not created by this customer."
          },
          "404": {
            "description": "No order found for for the specified ID."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/cart": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Retrieves the shopping cart",
        "description": "Returns a cart object that contains an array of cart items.",
        "operationId": "getCartItems",
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cart"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Adds an item to the cart",
        "description": "Creates a new cart item and updates the cart's total price.",
        "operationId": "createCartItem",
        "requestBody": {
          "description": "JSON object containing the product ID and quantity to add to the cart.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "quantity": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "examples": {
                "general": {
                  "summary": "Example",
                  "description": "Both `productId` and `quantity` must be positive whole numbers greater than zero.",
                  "value": {
                    "productId": 9,
                    "quantity": 2
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    },
    "/cart/{cartItemId}": {
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Updates the quantity of an item in the cart",
        "description": "Changes the quantity of an item in the cart specified by the item ID and updates the cart's total price.",
        "operationId": "updateCartItem",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "ID of the cart item to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "JSON object containing the updated quantity.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "quantity": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "examples": {
                "general": {
                  "summary": "Example",
                  "description": "The `quantity` field must be a positive whole number greater than zero.",
                  "value": {
                    "quantity": 3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          },
          "403": {
            "description": "Not authorized to update this cart item."
          },
          "404": {
            "description": "Cannot find a cart item with the specified ID."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Deletes an item in the cart",
        "description": "Deletes an item in the cart specified by the item ID and updates the cart's total price.",
        "operationId": "deleteCartItem",
        "parameters": [
          {
            "name": "cartItemId",
            "in": "path",
            "description": "ID of the cart item to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation."
          },
          "400": {
            "description": "Invalid data input. Check response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed (customer is not logged in)."
          },
          "403": {
            "description": "Not authorized to delete this cart item."
          },
          "404": {
            "description": "Cannot find a cart item with the specified ID."
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "customer": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "birthDate": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "SKU": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "description": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "description": "URL to image"
          },
          "thumbnail": {
            "type": "string",
            "description": "URL to thumbnail"
          },
          "inStock": {
            "type": "boolean"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "number",
            "format": "float"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "processing",
              "shipped",
              "canceled"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "shippingAddress": {
            "type": "object",
            "properties": {
              "addressLine1": {
                "type": "string"
              },
              "addressLine2": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "postalCode": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            }
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product": {
                  "$ref": "#/components/schemas/product"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "cart": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "format": "float"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                },
                "product": {
                  "$ref": "#/components/schemas/product"
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "sessionId"
      }
    }
  }
}